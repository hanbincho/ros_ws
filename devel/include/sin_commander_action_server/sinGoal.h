// Generated by gencpp from file sin_commander_action_server/sinGoal.msg
// DO NOT EDIT!


#ifndef SIN_COMMANDER_ACTION_SERVER_MESSAGE_SINGOAL_H
#define SIN_COMMANDER_ACTION_SERVER_MESSAGE_SINGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sin_commander_action_server
{
template <class ContainerAllocator>
struct sinGoal_
{
  typedef sinGoal_<ContainerAllocator> Type;

  sinGoal_()
    : amp(0.0)
    , freq(0.0)
    , cycles(0.0)  {
    }
  sinGoal_(const ContainerAllocator& _alloc)
    : amp(0.0)
    , freq(0.0)
    , cycles(0.0)  {
  (void)_alloc;
    }



   typedef float _amp_type;
  _amp_type amp;

   typedef float _freq_type;
  _freq_type freq;

   typedef float _cycles_type;
  _cycles_type cycles;





  typedef boost::shared_ptr< ::sin_commander_action_server::sinGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sin_commander_action_server::sinGoal_<ContainerAllocator> const> ConstPtr;

}; // struct sinGoal_

typedef ::sin_commander_action_server::sinGoal_<std::allocator<void> > sinGoal;

typedef boost::shared_ptr< ::sin_commander_action_server::sinGoal > sinGoalPtr;
typedef boost::shared_ptr< ::sin_commander_action_server::sinGoal const> sinGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sin_commander_action_server::sinGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sin_commander_action_server::sinGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace sin_commander_action_server

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'actionlib': ['/opt/ros/kinetic/share/actionlib/cmake/../msg'], 'sin_commander_action_server': ['/home/hanbin/ros_ws/devel/share/sin_commander_action_server/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp': ['/opt/ros/kinetic/share/roscpp/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::sin_commander_action_server::sinGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sin_commander_action_server::sinGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sin_commander_action_server::sinGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sin_commander_action_server::sinGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sin_commander_action_server::sinGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sin_commander_action_server::sinGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sin_commander_action_server::sinGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ffeb59ebfe8b276c08f84c2c146723ca";
  }

  static const char* value(const ::sin_commander_action_server::sinGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xffeb59ebfe8b276cULL;
  static const uint64_t static_value2 = 0x08f84c2c146723caULL;
};

template<class ContainerAllocator>
struct DataType< ::sin_commander_action_server::sinGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sin_commander_action_server/sinGoal";
  }

  static const char* value(const ::sin_commander_action_server::sinGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sin_commander_action_server::sinGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal definition\n\
float32 amp\n\
float32 freq\n\
float32 cycles\n\
";
  }

  static const char* value(const ::sin_commander_action_server::sinGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sin_commander_action_server::sinGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.amp);
      stream.next(m.freq);
      stream.next(m.cycles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sinGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sin_commander_action_server::sinGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sin_commander_action_server::sinGoal_<ContainerAllocator>& v)
  {
    s << indent << "amp: ";
    Printer<float>::stream(s, indent + "  ", v.amp);
    s << indent << "freq: ";
    Printer<float>::stream(s, indent + "  ", v.freq);
    s << indent << "cycles: ";
    Printer<float>::stream(s, indent + "  ", v.cycles);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SIN_COMMANDER_ACTION_SERVER_MESSAGE_SINGOAL_H
