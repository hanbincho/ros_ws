// Generated by gencpp from file coordinator/ManipTaskGoal.msg
// DO NOT EDIT!


#ifndef COORDINATOR_MESSAGE_MANIPTASKGOAL_H
#define COORDINATOR_MESSAGE_MANIPTASKGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>

namespace coordinator
{
template <class ContainerAllocator>
struct ManipTaskGoal_
{
  typedef ManipTaskGoal_<ContainerAllocator> Type;

  ManipTaskGoal_()
    : action_code(0)
    , object_code(0)
    , pickup_frame()
    , dropoff_frame()
    , gripper_goal_frame()
    , perception_source(0)  {
    }
  ManipTaskGoal_(const ContainerAllocator& _alloc)
    : action_code(0)
    , object_code(0)
    , pickup_frame(_alloc)
    , dropoff_frame(_alloc)
    , gripper_goal_frame(_alloc)
    , perception_source(0)  {
  (void)_alloc;
    }



   typedef int32_t _action_code_type;
  _action_code_type action_code;

   typedef int32_t _object_code_type;
  _object_code_type object_code;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _pickup_frame_type;
  _pickup_frame_type pickup_frame;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _dropoff_frame_type;
  _dropoff_frame_type dropoff_frame;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _gripper_goal_frame_type;
  _gripper_goal_frame_type gripper_goal_frame;

   typedef int32_t _perception_source_type;
  _perception_source_type perception_source;



  enum {
    PCL_VISION = 1,
    BLIND_MANIP = 2,
    GET_PICKUP_POSE = 1,
    WAIT_FOR_FINDER = 101,
    FIND_TABLE_SURFACE = 2,
    WAIT_FIND_TABLE_SURFACE = 102,
    GRAB_OBJECT = 3,
    WAIT_FOR_GRAB_OBJECT = 103,
    DROPOFF_OBJECT = 4,
    WAIT_FOR_DROPOFF_OBJECT = 104,
    STRADDLE_OBJECT = 8,
    WAIT_FOR_STRADDLE_OBJECT = 108,
    CART_MOVE_TO_GRIPPER_POSE = 9,
    WAIT_FOR_CART_MOVE = 109,
    NO_CURRENT_TASK = 6,
    MOVE_TO_PRE_POSE = 7,
    WAIT_FOR_MOVE_TO_PREPOSE = 107,
    WAIT_FOR_MOVE = 107,
    ABORT = 666,
  };


  typedef boost::shared_ptr< ::coordinator::ManipTaskGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coordinator::ManipTaskGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ManipTaskGoal_

typedef ::coordinator::ManipTaskGoal_<std::allocator<void> > ManipTaskGoal;

typedef boost::shared_ptr< ::coordinator::ManipTaskGoal > ManipTaskGoalPtr;
typedef boost::shared_ptr< ::coordinator::ManipTaskGoal const> ManipTaskGoalConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coordinator::ManipTaskGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coordinator::ManipTaskGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace coordinator

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'baxter_trajectory_streamer': ['/home/hanbin/ros_ws/devel/share/baxter_trajectory_streamer/msg'], 'roscpp': ['/opt/ros/kinetic/share/roscpp/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'arm7dof_traj_as': ['/home/hanbin/ros_ws/devel/share/arm7dof_traj_as/msg'], 'gazebo_msgs': ['/home/hanbin/ros_ws/src/learning_ros_external_pkgs_kinetic/gazebo_ros_pkgs/gazebo_msgs/msg'], 'actionlib': ['/opt/ros/kinetic/share/actionlib/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'baxter_core_msgs': ['/home/hanbin/ros_ws/src/learning_ros_external_pkgs_kinetic/baxter_common/baxter_core_msgs/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'coordinator': ['/home/hanbin/ros_ws/devel/share/coordinator/msg'], 'object_grabber': ['/home/hanbin/ros_ws/devel/share/object_grabber/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'tf': ['/opt/ros/kinetic/share/tf/cmake/../msg'], 'cartesian_planner': ['/home/hanbin/ros_ws/devel/share/cartesian_planner/msg'], 'pcl_msgs': ['/opt/ros/kinetic/share/pcl_msgs/cmake/../msg'], 'object_finder': ['/home/hanbin/ros_ws/devel/share/object_finder/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::coordinator::ManipTaskGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coordinator::ManipTaskGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coordinator::ManipTaskGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coordinator::ManipTaskGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coordinator::ManipTaskGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coordinator::ManipTaskGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coordinator::ManipTaskGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "439e760055837a8000a9a7865d0345ab";
  }

  static const char* value(const ::coordinator::ManipTaskGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x439e760055837a80ULL;
  static const uint64_t static_value2 = 0x00a9a7865d0345abULL;
};

template<class ContainerAllocator>
struct DataType< ::coordinator::ManipTaskGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coordinator/ManipTaskGoal";
  }

  static const char* value(const ::coordinator::ManipTaskGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coordinator::ManipTaskGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal: specify object code, perception type (incl blind), dropoff location, optional pickup location\n\
#task codes:\n\
int32 PCL_VISION = 1 # could have more camera sources to refer to\n\
int32 BLIND_MANIP = 2 #expect pose specified in pickup_location field\n\
\n\
#action codes:\n\
int32 GET_PICKUP_POSE = 1 #low level ops; maybe don't implement\n\
int32 WAIT_FOR_FINDER = 101\n\
\n\
int32 FIND_TABLE_SURFACE = 2 #do this once, and re-use result for multiple objects\n\
int32 WAIT_FIND_TABLE_SURFACE = 102\n\
\n\
int32 GRAB_OBJECT = 3 #assumes use of current pickup pose,\n\
                      #whether provided for \"blind\" manip, or found\n\
                      #from use of PCL_VISION\n\
int32 WAIT_FOR_GRAB_OBJECT = 103    \n\
                 \n\
int32 DROPOFF_OBJECT = 4 #must provide dropoff_frame in goal msg\n\
int32 WAIT_FOR_DROPOFF_OBJECT = 104\n\
\n\
#int32 MANIP_OBJECT = 5 #macro: does perception, grab, and dropoff\n\
                       #MUST provide dropoff frame, and means to\n\
                       #get pickup_frame\n\
\n\
int32 STRADDLE_OBJECT = 8 #test mode--simply straddle object, but don't grasp it\n\
int32 WAIT_FOR_STRADDLE_OBJECT = 108\n\
\n\
int32 CART_MOVE_TO_GRIPPER_POSE = 9\n\
int32 WAIT_FOR_CART_MOVE = 109\n\
                       \n\
int32 NO_CURRENT_TASK = 6\n\
int32 MOVE_TO_PRE_POSE = 7\n\
int32 WAIT_FOR_MOVE_TO_PREPOSE = 107\n\
int32 WAIT_FOR_MOVE = 107 #generic wait-for-move status\n\
\n\
int32 ABORT= 666\n\
\n\
#goal specification:\n\
int32 action_code #what action should be performed?\n\
int32 object_code #refer to a-priori known object types by object-ID codes\n\
geometry_msgs/PoseStamped pickup_frame #specify object coords for pickup \n\
geometry_msgs/PoseStamped dropoff_frame #specify desired drop-off coords of object's frame\n\
geometry_msgs/PoseStamped gripper_goal_frame #a goal frame to move gripper\n\
int32 perception_source  #e.g. name a camera source\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::coordinator::ManipTaskGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coordinator::ManipTaskGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_code);
      stream.next(m.object_code);
      stream.next(m.pickup_frame);
      stream.next(m.dropoff_frame);
      stream.next(m.gripper_goal_frame);
      stream.next(m.perception_source);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ManipTaskGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coordinator::ManipTaskGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coordinator::ManipTaskGoal_<ContainerAllocator>& v)
  {
    s << indent << "action_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action_code);
    s << indent << "object_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.object_code);
    s << indent << "pickup_frame: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pickup_frame);
    s << indent << "dropoff_frame: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.dropoff_frame);
    s << indent << "gripper_goal_frame: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.gripper_goal_frame);
    s << indent << "perception_source: ";
    Printer<int32_t>::stream(s, indent + "  ", v.perception_source);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COORDINATOR_MESSAGE_MANIPTASKGOAL_H
