// Generated by gencpp from file arm_motion_action/arm_interfaceActionGoal.msg
// DO NOT EDIT!


#ifndef ARM_MOTION_ACTION_MESSAGE_ARM_INTERFACEACTIONGOAL_H
#define ARM_MOTION_ACTION_MESSAGE_ARM_INTERFACEACTIONGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <actionlib_msgs/GoalID.h>
#include <arm_motion_action/arm_interfaceGoal.h>

namespace arm_motion_action
{
template <class ContainerAllocator>
struct arm_interfaceActionGoal_
{
  typedef arm_interfaceActionGoal_<ContainerAllocator> Type;

  arm_interfaceActionGoal_()
    : header()
    , goal_id()
    , goal()  {
    }
  arm_interfaceActionGoal_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , goal_id(_alloc)
    , goal(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::actionlib_msgs::GoalID_<ContainerAllocator>  _goal_id_type;
  _goal_id_type goal_id;

   typedef  ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator>  _goal_type;
  _goal_type goal;





  typedef boost::shared_ptr< ::arm_motion_action::arm_interfaceActionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_motion_action::arm_interfaceActionGoal_<ContainerAllocator> const> ConstPtr;

}; // struct arm_interfaceActionGoal_

typedef ::arm_motion_action::arm_interfaceActionGoal_<std::allocator<void> > arm_interfaceActionGoal;

typedef boost::shared_ptr< ::arm_motion_action::arm_interfaceActionGoal > arm_interfaceActionGoalPtr;
typedef boost::shared_ptr< ::arm_motion_action::arm_interfaceActionGoal const> arm_interfaceActionGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_motion_action::arm_interfaceActionGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_motion_action::arm_interfaceActionGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace arm_motion_action

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'roscpp': ['/opt/ros/kinetic/share/roscpp/cmake/../msg'], 'actionlib': ['/opt/ros/kinetic/share/actionlib/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'arm_motion_action': ['/home/hanbin/ros_ws/devel/share/arm_motion_action/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::arm_motion_action::arm_interfaceActionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_motion_action::arm_interfaceActionGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_motion_action::arm_interfaceActionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_motion_action::arm_interfaceActionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_motion_action::arm_interfaceActionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_motion_action::arm_interfaceActionGoal_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_motion_action::arm_interfaceActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9e97718a7ab375036bb56bb9356b4a91";
  }

  static const char* value(const ::arm_motion_action::arm_interfaceActionGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9e97718a7ab37503ULL;
  static const uint64_t static_value2 = 0x6bb56bb9356b4a91ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_motion_action::arm_interfaceActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_motion_action/arm_interfaceActionGoal";
  }

  static const char* value(const ::arm_motion_action::arm_interfaceActionGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_motion_action::arm_interfaceActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
Header header\n\
actionlib_msgs/GoalID goal_id\n\
arm_interfaceGoal goal\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: actionlib_msgs/GoalID\n\
# The stamp should store the time at which this goal was requested.\n\
# It is used by an action server when it tries to preempt all\n\
# goals that were requested before a certain time\n\
time stamp\n\
\n\
# The id provides a way to associate feedback and\n\
# result message with specific goal requests. The id\n\
# specified must be unique.\n\
string id\n\
\n\
\n\
================================================================================\n\
MSG: arm_motion_action/arm_interfaceGoal\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#cartesian-move action interface\n\
#minimally, it may contain just a command code\n\
#more generally, it may contain desired tool-frame pose, as well\n\
# as gripper pose (gripper opening, or vacuum gripper on/off)\n\
# and an arrival time for the move\n\
# It is assumed that a move starts from the previous commanded pose, or from the current joint state\n\
\n\
#return codes provide status info, e.g. if a proposed move is reachable\n\
\n\
#define message constants:  \n\
uint8 ARM_TEST_MODE = 0\n\
\n\
#queries\n\
uint8 ARM_IS_SERVER_BUSY_QUERY = 1\n\
uint8 ARM_QUERY_IS_PATH_VALID = 2\n\
uint8 GET_TOOL_POSE = 5\n\
uint8 GET_Q_DATA = 7\n\
\n\
#requests for motion plans; \n\
uint8 PLAN_JSPACE_TRAJ_CURRENT_TO_WAITING_POSE=20\n\
uint8 PLAN_JSPACE_TRAJ_CURRENT_TO_QGOAL = 21\n\
uint8 PLAN_JSPACE_TRAJ_CURRENT_TO_CART_TOOL_POSE = 22 #plan a joint-space path from current arm pose to some IK soln of Cartesian goal\n\
\n\
uint8 PLAN_CARTESIAN_TRAJ_CURRENT_TO_DES_TOOL_POSE = 23\n\
uint8 PLAN_CARTESIAN_TRAJ_QSTART_TO_DES_TOOL_POSE = 24\n\
uint8 PLAN_CARTESIAN_TRAJ_QPREV_TO_DES_TOOL_POSE = 25\n\
\n\
uint8 CLEAR_MULTI_TRAJ_PLAN = 26\n\
uint8 APPEND_MULTI_TRAJ_CART_SEGMENT = 27\n\
uint8 APPEND_MULTI_TRAJ_JSPACE_SEGMENT = 28\n\
uint8 TEST_PATH_FOR_DISCONTINUITIES = 29\n\
uint8 GET_NUM_PATH_SEGMENTS = 30\n\
uint8 GET_REPLANNED_ARRIVAL_TIMES = 31\n\
uint8 REPLAN_DISCONTINUITIES = 32\n\
\n\
uint8 REFINE_PLANNED_TRAJECTORY = 41 #if used approx IK soln, use this option to refine solns\n\
uint8 SEGMENT_DISCONTINUOUS_TRAJ = 42 #if soln is discontinuous, segment it into a multi-traj plan\n\
# return the number of new segments and their respective arrival times\n\
\n\
# request to preview plan:\n\
#uint8 DISPLAY_TRAJECTORY = 50\n\
\n\
#MOVE command!\n\
uint8 EXECUTE_PLANNED_TRAJ = 100\n\
#specify a segment number to be executed from a multi-segment trajectory\n\
uint8 EXECUTE_TRAJ_NSEG = 101\n\
#for a path with discontinuities, command arm to go to first pose of segment nseg\n\
#specify the path segment in element \"nseg\"\n\
uint8 GOTO_NSEG_START = 102\n\
\n\
#uint8 ARM_DESCEND_20CM=101\n\
#uint8 ARM_DEPART_20CM=102\n\
\n\
\n\
#goal:\n\
int32 command_code\n\
geometry_msgs/PoseStamped des_pose_gripper\n\
float64[] arm_dp #to command a 3-D vector displacement relative to current pose, fixed orientation\n\
float64[] q_goal\n\
float64[] q_start\n\
int32 nsteps\n\
float64 arrival_time\n\
int32 nseg #to choose one of NSEG segments in a multi-traj vector\n\
#float64 time_scale_stretch_factor\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::arm_motion_action::arm_interfaceActionGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_motion_action::arm_interfaceActionGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.goal_id);
      stream.next(m.goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arm_interfaceActionGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_motion_action::arm_interfaceActionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_motion_action::arm_interfaceActionGoal_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "goal_id: ";
    s << std::endl;
    Printer< ::actionlib_msgs::GoalID_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_id);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::arm_motion_action::arm_interfaceGoal_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_MOTION_ACTION_MESSAGE_ARM_INTERFACEACTIONGOAL_H
