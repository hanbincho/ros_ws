// Generated by gencpp from file coordinator/OpenLoopNavSvcRequest.msg
// DO NOT EDIT!


#ifndef COORDINATOR_MESSAGE_OPENLOOPNAVSVCREQUEST_H
#define COORDINATOR_MESSAGE_OPENLOOPNAVSVCREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace coordinator
{
template <class ContainerAllocator>
struct OpenLoopNavSvcRequest_
{
  typedef OpenLoopNavSvcRequest_<ContainerAllocator> Type;

  OpenLoopNavSvcRequest_()
    : move_distance(0.0)  {
    }
  OpenLoopNavSvcRequest_(const ContainerAllocator& _alloc)
    : move_distance(0.0)  {
  (void)_alloc;
    }



   typedef double _move_distance_type;
  _move_distance_type move_distance;





  typedef boost::shared_ptr< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> const> ConstPtr;

}; // struct OpenLoopNavSvcRequest_

typedef ::coordinator::OpenLoopNavSvcRequest_<std::allocator<void> > OpenLoopNavSvcRequest;

typedef boost::shared_ptr< ::coordinator::OpenLoopNavSvcRequest > OpenLoopNavSvcRequestPtr;
typedef boost::shared_ptr< ::coordinator::OpenLoopNavSvcRequest const> OpenLoopNavSvcRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace coordinator

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'baxter_trajectory_streamer': ['/home/hanbin/ros_ws/devel/share/baxter_trajectory_streamer/msg'], 'roscpp': ['/opt/ros/kinetic/share/roscpp/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'arm7dof_traj_as': ['/home/hanbin/ros_ws/devel/share/arm7dof_traj_as/msg'], 'gazebo_msgs': ['/home/hanbin/ros_ws/src/learning_ros_external_pkgs_kinetic/gazebo_ros_pkgs/gazebo_msgs/msg'], 'actionlib': ['/opt/ros/kinetic/share/actionlib/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'baxter_core_msgs': ['/home/hanbin/ros_ws/src/learning_ros_external_pkgs_kinetic/baxter_common/baxter_core_msgs/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'coordinator': ['/home/hanbin/ros_ws/devel/share/coordinator/msg'], 'object_grabber': ['/home/hanbin/ros_ws/devel/share/object_grabber/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'tf': ['/opt/ros/kinetic/share/tf/cmake/../msg'], 'cartesian_planner': ['/home/hanbin/ros_ws/devel/share/cartesian_planner/msg'], 'pcl_msgs': ['/opt/ros/kinetic/share/pcl_msgs/cmake/../msg'], 'object_finder': ['/home/hanbin/ros_ws/devel/share/object_finder/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd1ab1819c86c0434d8f0532349189fe";
  }

  static const char* value(const ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd1ab1819c86c043ULL;
  static const uint64_t static_value2 = 0x4d8f0532349189feULL;
};

template<class ContainerAllocator>
struct DataType< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coordinator/OpenLoopNavSvcRequest";
  }

  static const char* value(const ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 move_distance\n\
";
  }

  static const char* value(const ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.move_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OpenLoopNavSvcRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coordinator::OpenLoopNavSvcRequest_<ContainerAllocator>& v)
  {
    s << indent << "move_distance: ";
    Printer<double>::stream(s, indent + "  ", v.move_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COORDINATOR_MESSAGE_OPENLOOPNAVSVCREQUEST_H
