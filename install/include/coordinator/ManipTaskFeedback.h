// Generated by gencpp from file coordinator/ManipTaskFeedback.msg
// DO NOT EDIT!


#ifndef COORDINATOR_MESSAGE_MANIPTASKFEEDBACK_H
#define COORDINATOR_MESSAGE_MANIPTASKFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace coordinator
{
template <class ContainerAllocator>
struct ManipTaskFeedback_
{
  typedef ManipTaskFeedback_<ContainerAllocator> Type;

  ManipTaskFeedback_()
    : feedback_status(0)  {
    }
  ManipTaskFeedback_(const ContainerAllocator& _alloc)
    : feedback_status(0)  {
  (void)_alloc;
    }



   typedef int32_t _feedback_status_type;
  _feedback_status_type feedback_status;



  enum {
    RECEIVED_NEW_TASK = 0,
    PERCEPTION_BUSY = 1,
    PICKUP_PLANNING_BUSY = 2,
    PICKUP_MOTION_BUSY = 3,
    PICKUP_SUCCESSFUL = 103,
    DROPOFF_PLANNING_BUSY = 4,
    DROPOFF_MOTION_BUSY = 5,
    NO_CURRENT_TASK = 6,
    ABORTED = 7,
    COMPLETED_MOVE = 8,
    COMPLETED_DROPOFF = 9,
    PREPOSE_MOVE_BUSY = 10,
    MOVE_BUSY = 11,
  };


  typedef boost::shared_ptr< ::coordinator::ManipTaskFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coordinator::ManipTaskFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct ManipTaskFeedback_

typedef ::coordinator::ManipTaskFeedback_<std::allocator<void> > ManipTaskFeedback;

typedef boost::shared_ptr< ::coordinator::ManipTaskFeedback > ManipTaskFeedbackPtr;
typedef boost::shared_ptr< ::coordinator::ManipTaskFeedback const> ManipTaskFeedbackConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coordinator::ManipTaskFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coordinator::ManipTaskFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace coordinator

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'baxter_trajectory_streamer': ['/home/hanbin/ros_ws/devel/share/baxter_trajectory_streamer/msg'], 'roscpp': ['/opt/ros/kinetic/share/roscpp/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'arm7dof_traj_as': ['/home/hanbin/ros_ws/devel/share/arm7dof_traj_as/msg'], 'gazebo_msgs': ['/home/hanbin/ros_ws/src/learning_ros_external_pkgs_kinetic/gazebo_ros_pkgs/gazebo_msgs/msg'], 'actionlib': ['/opt/ros/kinetic/share/actionlib/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'baxter_core_msgs': ['/home/hanbin/ros_ws/src/learning_ros_external_pkgs_kinetic/baxter_common/baxter_core_msgs/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'coordinator': ['/home/hanbin/ros_ws/devel/share/coordinator/msg'], 'object_grabber': ['/home/hanbin/ros_ws/devel/share/object_grabber/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'tf': ['/opt/ros/kinetic/share/tf/cmake/../msg'], 'cartesian_planner': ['/home/hanbin/ros_ws/devel/share/cartesian_planner/msg'], 'pcl_msgs': ['/opt/ros/kinetic/share/pcl_msgs/cmake/../msg'], 'object_finder': ['/home/hanbin/ros_ws/devel/share/object_finder/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::coordinator::ManipTaskFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coordinator::ManipTaskFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coordinator::ManipTaskFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coordinator::ManipTaskFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coordinator::ManipTaskFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coordinator::ManipTaskFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coordinator::ManipTaskFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f8a8da4157bed0205549b661c5eec04";
  }

  static const char* value(const ::coordinator::ManipTaskFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f8a8da4157bed02ULL;
  static const uint64_t static_value2 = 0x05549b661c5eec04ULL;
};

template<class ContainerAllocator>
struct DataType< ::coordinator::ManipTaskFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coordinator/ManipTaskFeedback";
  }

  static const char* value(const ::coordinator::ManipTaskFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coordinator::ManipTaskFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#feedback codes:  perception_busy; planning_busy; pickup_busy; dropoff_busy\n\
int32 RECEIVED_NEW_TASK = 0\n\
int32 PERCEPTION_BUSY = 1\n\
int32 PICKUP_PLANNING_BUSY = 2\n\
int32 PICKUP_MOTION_BUSY = 3\n\
int32 PICKUP_SUCCESSFUL = 103\n\
int32 DROPOFF_PLANNING_BUSY = 4\n\
int32 DROPOFF_MOTION_BUSY = 5\n\
int32 NO_CURRENT_TASK = 6\n\
int32 ABORTED = 7\n\
int32 COMPLETED_MOVE = 8\n\
int32 COMPLETED_DROPOFF = 9\n\
int32 PREPOSE_MOVE_BUSY = 10\n\
int32 MOVE_BUSY = 11\n\
\n\
\n\
int32 feedback_status\n\
\n\
";
  }

  static const char* value(const ::coordinator::ManipTaskFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coordinator::ManipTaskFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.feedback_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ManipTaskFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coordinator::ManipTaskFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coordinator::ManipTaskFeedback_<ContainerAllocator>& v)
  {
    s << indent << "feedback_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.feedback_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COORDINATOR_MESSAGE_MANIPTASKFEEDBACK_H
