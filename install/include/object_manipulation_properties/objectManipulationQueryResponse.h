// Generated by gencpp from file object_manipulation_properties/objectManipulationQueryResponse.msg
// DO NOT EDIT!


#ifndef OBJECT_MANIPULATION_PROPERTIES_MESSAGE_OBJECTMANIPULATIONQUERYRESPONSE_H
#define OBJECT_MANIPULATION_PROPERTIES_MESSAGE_OBJECTMANIPULATIONQUERYRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace object_manipulation_properties
{
template <class ContainerAllocator>
struct objectManipulationQueryResponse_
{
  typedef objectManipulationQueryResponse_<ContainerAllocator> Type;

  objectManipulationQueryResponse_()
    : valid_reply(false)
    , grasp_strategy_options()
    , gripper_pose_options()
    , tool_rotz_max()
    , tool_rotz_min()
    , object_rotz_max()
    , object_rotz_min()
    , tool_dz_max()
    , tool_dz_min()
    , tool_dslide_max()
    , tool_dslide_min()  {
    }
  objectManipulationQueryResponse_(const ContainerAllocator& _alloc)
    : valid_reply(false)
    , grasp_strategy_options(_alloc)
    , gripper_pose_options(_alloc)
    , tool_rotz_max(_alloc)
    , tool_rotz_min(_alloc)
    , object_rotz_max(_alloc)
    , object_rotz_min(_alloc)
    , tool_dz_max(_alloc)
    , tool_dz_min(_alloc)
    , tool_dslide_max(_alloc)
    , tool_dslide_min(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _valid_reply_type;
  _valid_reply_type valid_reply;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _grasp_strategy_options_type;
  _grasp_strategy_options_type grasp_strategy_options;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _gripper_pose_options_type;
  _gripper_pose_options_type gripper_pose_options;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tool_rotz_max_type;
  _tool_rotz_max_type tool_rotz_max;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tool_rotz_min_type;
  _tool_rotz_min_type tool_rotz_min;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _object_rotz_max_type;
  _object_rotz_max_type object_rotz_max;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _object_rotz_min_type;
  _object_rotz_min_type object_rotz_min;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tool_dz_max_type;
  _tool_dz_max_type tool_dz_max;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tool_dz_min_type;
  _tool_dz_min_type tool_dz_min;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tool_dslide_max_type;
  _tool_dslide_max_type tool_dslide_max;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tool_dslide_min_type;
  _tool_dslide_min_type tool_dslide_min;



  enum {
    QUERY_SUCCESSFUL = 0,
    QUERY_NOT_VALID = 1,
    APPROACH_Z_TOOL = 11,
    DEPART_Z_TOOL = 12,
    APPROACH_LATERAL_SLIDE = 21,
    DEPART_LATERAL_SLIDE = 22,
    GRASP_FROM_ABOVE = 0,
    GRASP_FROM_SIDE = 1,
  };


  typedef boost::shared_ptr< ::object_manipulation_properties::objectManipulationQueryResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_manipulation_properties::objectManipulationQueryResponse_<ContainerAllocator> const> ConstPtr;

}; // struct objectManipulationQueryResponse_

typedef ::object_manipulation_properties::objectManipulationQueryResponse_<std::allocator<void> > objectManipulationQueryResponse;

typedef boost::shared_ptr< ::object_manipulation_properties::objectManipulationQueryResponse > objectManipulationQueryResponsePtr;
typedef boost::shared_ptr< ::object_manipulation_properties::objectManipulationQueryResponse const> objectManipulationQueryResponseConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_manipulation_properties::objectManipulationQueryResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_manipulation_properties::objectManipulationQueryResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace object_manipulation_properties

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roscpp': ['/opt/ros/kinetic/share/roscpp/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::object_manipulation_properties::objectManipulationQueryResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_manipulation_properties::objectManipulationQueryResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_manipulation_properties::objectManipulationQueryResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_manipulation_properties::objectManipulationQueryResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_manipulation_properties::objectManipulationQueryResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_manipulation_properties::objectManipulationQueryResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_manipulation_properties::objectManipulationQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f2db4a08ed98eb88a20887ea04f035c4";
  }

  static const char* value(const ::object_manipulation_properties::objectManipulationQueryResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf2db4a08ed98eb88ULL;
  static const uint64_t static_value2 = 0xa20887ea04f035c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_manipulation_properties::objectManipulationQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_manipulation_properties/objectManipulationQueryResponse";
  }

  static const char* value(const ::object_manipulation_properties::objectManipulationQueryResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_manipulation_properties::objectManipulationQueryResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 QUERY_SUCCESSFUL =0\n\
int32 QUERY_NOT_VALID = 1\n\
int32 APPROACH_Z_TOOL= 11\n\
int32 DEPART_Z_TOOL = 12\n\
int32 APPROACH_LATERAL_SLIDE = 21\n\
int32 DEPART_LATERAL_SLIDE = 22\n\
\n\
int32 GRASP_FROM_ABOVE = 0\n\
\n\
int32 GRASP_FROM_SIDE = 1\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
bool valid_reply\n\
int32[] grasp_strategy_options\n\
\n\
\n\
\n\
\n\
\n\
\n\
geometry_msgs/Pose[] gripper_pose_options\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
\n\
float64[] tool_rotz_max\n\
float64[] tool_rotz_min\n\
float64[] object_rotz_max\n\
float64[] object_rotz_min\n\
float64[] tool_dz_max\n\
float64[] tool_dz_min\n\
float64[] tool_dslide_max\n\
float64[] tool_dslide_min\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::object_manipulation_properties::objectManipulationQueryResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_manipulation_properties::objectManipulationQueryResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.valid_reply);
      stream.next(m.grasp_strategy_options);
      stream.next(m.gripper_pose_options);
      stream.next(m.tool_rotz_max);
      stream.next(m.tool_rotz_min);
      stream.next(m.object_rotz_max);
      stream.next(m.object_rotz_min);
      stream.next(m.tool_dz_max);
      stream.next(m.tool_dz_min);
      stream.next(m.tool_dslide_max);
      stream.next(m.tool_dslide_min);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct objectManipulationQueryResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_manipulation_properties::objectManipulationQueryResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_manipulation_properties::objectManipulationQueryResponse_<ContainerAllocator>& v)
  {
    s << indent << "valid_reply: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid_reply);
    s << indent << "grasp_strategy_options[]" << std::endl;
    for (size_t i = 0; i < v.grasp_strategy_options.size(); ++i)
    {
      s << indent << "  grasp_strategy_options[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.grasp_strategy_options[i]);
    }
    s << indent << "gripper_pose_options[]" << std::endl;
    for (size_t i = 0; i < v.gripper_pose_options.size(); ++i)
    {
      s << indent << "  gripper_pose_options[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.gripper_pose_options[i]);
    }
    s << indent << "tool_rotz_max[]" << std::endl;
    for (size_t i = 0; i < v.tool_rotz_max.size(); ++i)
    {
      s << indent << "  tool_rotz_max[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tool_rotz_max[i]);
    }
    s << indent << "tool_rotz_min[]" << std::endl;
    for (size_t i = 0; i < v.tool_rotz_min.size(); ++i)
    {
      s << indent << "  tool_rotz_min[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tool_rotz_min[i]);
    }
    s << indent << "object_rotz_max[]" << std::endl;
    for (size_t i = 0; i < v.object_rotz_max.size(); ++i)
    {
      s << indent << "  object_rotz_max[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.object_rotz_max[i]);
    }
    s << indent << "object_rotz_min[]" << std::endl;
    for (size_t i = 0; i < v.object_rotz_min.size(); ++i)
    {
      s << indent << "  object_rotz_min[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.object_rotz_min[i]);
    }
    s << indent << "tool_dz_max[]" << std::endl;
    for (size_t i = 0; i < v.tool_dz_max.size(); ++i)
    {
      s << indent << "  tool_dz_max[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tool_dz_max[i]);
    }
    s << indent << "tool_dz_min[]" << std::endl;
    for (size_t i = 0; i < v.tool_dz_min.size(); ++i)
    {
      s << indent << "  tool_dz_min[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tool_dz_min[i]);
    }
    s << indent << "tool_dslide_max[]" << std::endl;
    for (size_t i = 0; i < v.tool_dslide_max.size(); ++i)
    {
      s << indent << "  tool_dslide_max[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tool_dslide_max[i]);
    }
    s << indent << "tool_dslide_min[]" << std::endl;
    for (size_t i = 0; i < v.tool_dslide_min.size(); ++i)
    {
      s << indent << "  tool_dslide_min[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tool_dslide_min[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_MANIPULATION_PROPERTIES_MESSAGE_OBJECTMANIPULATIONQUERYRESPONSE_H
