// Generated by gencpp from file magic_object_finder/magicObjectFinderGoal.msg
// DO NOT EDIT!


#ifndef MAGIC_OBJECT_FINDER_MESSAGE_MAGICOBJECTFINDERGOAL_H
#define MAGIC_OBJECT_FINDER_MESSAGE_MAGICOBJECTFINDERGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace magic_object_finder
{
template <class ContainerAllocator>
struct magicObjectFinderGoal_
{
  typedef magicObjectFinderGoal_<ContainerAllocator> Type;

  magicObjectFinderGoal_()
    : object_name()  {
    }
  magicObjectFinderGoal_(const ContainerAllocator& _alloc)
    : object_name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_name_type;
  _object_name_type object_name;





  typedef boost::shared_ptr< ::magic_object_finder::magicObjectFinderGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::magic_object_finder::magicObjectFinderGoal_<ContainerAllocator> const> ConstPtr;

}; // struct magicObjectFinderGoal_

typedef ::magic_object_finder::magicObjectFinderGoal_<std::allocator<void> > magicObjectFinderGoal;

typedef boost::shared_ptr< ::magic_object_finder::magicObjectFinderGoal > magicObjectFinderGoalPtr;
typedef boost::shared_ptr< ::magic_object_finder::magicObjectFinderGoal const> magicObjectFinderGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::magic_object_finder::magicObjectFinderGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::magic_object_finder::magicObjectFinderGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace magic_object_finder

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'roscpp': ['/opt/ros/kinetic/share/roscpp/cmake/../msg'], 'magic_object_finder': ['/home/hanbin/ros_ws/devel/share/magic_object_finder/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib': ['/opt/ros/kinetic/share/actionlib/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'gazebo_msgs': ['/home/hanbin/ros_ws/src/learning_ros_external_pkgs_kinetic/gazebo_ros_pkgs/gazebo_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::magic_object_finder::magicObjectFinderGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::magic_object_finder::magicObjectFinderGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::magic_object_finder::magicObjectFinderGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::magic_object_finder::magicObjectFinderGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::magic_object_finder::magicObjectFinderGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::magic_object_finder::magicObjectFinderGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::magic_object_finder::magicObjectFinderGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2f12226348d323c2e5b2031b3da53f1b";
  }

  static const char* value(const ::magic_object_finder::magicObjectFinderGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2f12226348d323c2ULL;
  static const uint64_t static_value2 = 0xe5b2031b3da53f1bULL;
};

template<class ContainerAllocator>
struct DataType< ::magic_object_finder::magicObjectFinderGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "magic_object_finder/magicObjectFinderGoal";
  }

  static const char* value(const ::magic_object_finder::magicObjectFinderGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::magic_object_finder::magicObjectFinderGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#objectFinder.action\n\
#goal:\n\
#get object ID codes from <object_manipulation_properties/object_ID_codes.h>\n\
#goal field to fill in: name of object of interest\n\
string object_name\n\
";
  }

  static const char* value(const ::magic_object_finder::magicObjectFinderGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::magic_object_finder::magicObjectFinderGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct magicObjectFinderGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::magic_object_finder::magicObjectFinderGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::magic_object_finder::magicObjectFinderGoal_<ContainerAllocator>& v)
  {
    s << indent << "object_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAGIC_OBJECT_FINDER_MESSAGE_MAGICOBJECTFINDERGOAL_H
